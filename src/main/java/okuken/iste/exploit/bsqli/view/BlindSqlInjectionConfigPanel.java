package okuken.iste.exploit.bsqli.view;

import javax.swing.JPanel;
import javax.swing.JRadioButton;

import okuken.iste.consts.Captions;
import okuken.iste.exploit.bsqli.command.BlindSqlInjectionJudgeCommand;
import okuken.iste.exploit.bsqli.command.BlindSqlInjectionJudgeCommandFactory;
import okuken.iste.exploit.bsqli.dto.BlindSqlInjectionConfigDto;
import okuken.iste.exploit.bsqli.enums.BlindSqlInjectionJudgeOperatorType;
import okuken.iste.exploit.bsqli.logic.BlindSqlInjectionLogic;
import okuken.iste.util.ByteUtil;

import javax.swing.ButtonGroup;
import javax.swing.JButton;
import javax.swing.JLabel;
import javax.swing.JCheckBox;
import java.awt.event.ActionListener;
import java.util.Arrays;
import java.awt.event.ActionEvent;
import javax.swing.JComboBox;
import javax.swing.JTextField;

public class BlindSqlInjectionConfigPanel extends JPanel {

	private static final long serialVersionUID = 1L;

	private ButtonGroup judgeButtonGroup = new ButtonGroup();
	private JRadioButton judgeByLengthRadioButton;
	private JRadioButton judgeByTimeRadioButton;
	private JRadioButton judgeByRegexRadioButton;

	private JCheckBox useChainCheckBox;
	private JCheckBox needUrlEncodeCheckBox;

	private JComboBox<BlindSqlInjectionJudgeOperatorType> operatorComboBox;
	private JTextField valueTextField;
	private JCheckBox regexInverseCheckBox;

	private JTextField startIndexTextField;
	private JTextField maxIndexTextField;
	private JTextField intervalTimeMsTextField;

	private BlindSqlInjectionPanel parentPanel;

	public BlindSqlInjectionConfigPanel(BlindSqlInjectionPanel parentPanel) {
		this.parentPanel = parentPanel;
		
		JButton setIndexMarkButton = new JButton(Captions.TOOLS_EXPLOIT_SET + " " + BlindSqlInjectionLogic.POSITION_MARK_INDEX);
		setIndexMarkButton.setToolTipText(String.format(Captions.TOOLS_EXPLOIT_BSQLI_BUTTON_INDEX_TT, BlindSqlInjectionLogic.POSITION_MARK_INDEX, BlindSqlInjectionLogic.POSITION_MARK_OPERATOR_AND_VALUE));
		setIndexMarkButton.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				setIndexMark();
			}
		});
		add(setIndexMarkButton);
		
		JButton setOperatorAndValueMarkButton = new JButton(Captions.TOOLS_EXPLOIT_SET + " " + BlindSqlInjectionLogic.POSITION_MARK_OPERATOR_AND_VALUE);
		setOperatorAndValueMarkButton.setToolTipText(String.format(Captions.TOOLS_EXPLOIT_BSQLI_BUTTON_OPEVAL_TT, BlindSqlInjectionLogic.POSITION_MARK_INDEX, BlindSqlInjectionLogic.POSITION_MARK_OPERATOR_AND_VALUE));
		setOperatorAndValueMarkButton.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				setOperatorAndValueMark();
			}
		});
		add(setOperatorAndValueMarkButton);
		
		JButton setValueMarkButton = new JButton(Captions.TOOLS_EXPLOIT_SET + " " + BlindSqlInjectionLogic.POSITION_MARK_VALUE);
		setValueMarkButton.setToolTipText(String.format(Captions.TOOLS_EXPLOIT_BSQLI_BUTTON_VALUE_TT, BlindSqlInjectionLogic.POSITION_MARK_INDEX, BlindSqlInjectionLogic.POSITION_MARK_VALUE));
		setValueMarkButton.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				setValueMark();
			}
		});
		add(setValueMarkButton);
		
		useChainCheckBox = new JCheckBox(Captions.TOOLS_EXPLOIT_USE_CHAIN);
		add(useChainCheckBox);
		
		needUrlEncodeCheckBox = new JCheckBox(Captions.TOOLS_EXPLOIT_NEED_URLENCODE);
		add(needUrlEncodeCheckBox);
		
		JLabel judgeByLabel = new JLabel(Captions.TOOLS_EXPLOIT_BSQLI_JUDGEBY + ":");
		add(judgeByLabel);
		
		judgeByLengthRadioButton = new JRadioButton(Captions.TOOLS_EXPLOIT_BSQLI_JUDGEBY_LENGTH);
		judgeButtonGroup.add(judgeByLengthRadioButton);
		add(judgeByLengthRadioButton);
		
		judgeByTimeRadioButton = new JRadioButton(Captions.TOOLS_EXPLOIT_BSQLI_JUDGEBY_TIME);
		judgeButtonGroup.add(judgeByTimeRadioButton);
		add(judgeByTimeRadioButton);
		
		judgeByRegexRadioButton = new JRadioButton(Captions.TOOLS_EXPLOIT_BSQLI_JUDGEBY_REGEX);
		judgeButtonGroup.add(judgeByRegexRadioButton);
		add(judgeByRegexRadioButton);
		
		operatorComboBox = new JComboBox<BlindSqlInjectionJudgeOperatorType>();
		Arrays.stream(BlindSqlInjectionJudgeOperatorType.values()).forEach(operator -> {
			operatorComboBox.addItem(operator);
		});
		add(operatorComboBox);
		
		valueTextField = new JTextField(10);
		add(valueTextField);
		
		regexInverseCheckBox = new JCheckBox(Captions.TOOLS_EXPLOIT_BSQLI_JUDGEBY_REGEX_INVERSE);
		add(regexInverseCheckBox);
		
		JLabel startIndexLabel = new JLabel(Captions.TOOLS_EXPLOIT_START_INDEX + ":");
		add(startIndexLabel);
		
		startIndexTextField = new JTextField(Integer.toString(BlindSqlInjectionConfigDto.DEFAULT_START_INDEX), 3);
		add(startIndexTextField);
		
		JLabel maxIndexLabel = new JLabel(Captions.TOOLS_EXPLOIT_MAX_INDEX + ":");
		add(maxIndexLabel);
		
		maxIndexTextField = new JTextField(Integer.toString(BlindSqlInjectionConfigDto.DEFAULT_MAX_INDEX), 3);
		add(maxIndexTextField);
		
		JLabel intervalTimeMsLabel = new JLabel(Captions.TOOLS_EXPLOIT_INTERVAL_TIME + ":");
		add(intervalTimeMsLabel);
		
		intervalTimeMsTextField = new JTextField(Integer.toString(BlindSqlInjectionConfigDto.DEFAULT_INTERVAL_TIMEMS), 5);
		add(intervalTimeMsTextField);
		
	}

	BlindSqlInjectionConfigDto createDto() {
		var messageEditorPanel = parentPanel.getMessageSelectorPanel().getMessageEditorPanel();
		var ret = new BlindSqlInjectionConfigDto(messageEditorPanel.getRequest(), messageEditorPanel.getHttpService(), createJudgeCommand());
		ret.setUseChain(useChainCheckBox.isSelected());
		ret.setNeedUrlEncode(needUrlEncodeCheckBox.isSelected());
		ret.setStartIndex(Integer.parseInt(startIndexTextField.getText()));
		ret.setMaxIndex(Integer.parseInt(maxIndexTextField.getText()));
		ret.setIntervalTimeMs(Integer.parseInt(intervalTimeMsTextField.getText()));
		return ret;
	}
	private BlindSqlInjectionJudgeCommand createJudgeCommand() {
		var operator = operatorComboBox.getItemAt(operatorComboBox.getSelectedIndex());
		var value = valueTextField.getText();
		if(judgeByLengthRadioButton.isSelected()) {
			return BlindSqlInjectionJudgeCommandFactory.createJudgeByLengthCommand(operator, Integer.parseInt(value));
		}
		if(judgeByTimeRadioButton.isSelected()) {
			return BlindSqlInjectionJudgeCommandFactory.createJudgeByTimeCommand(operator, Integer.parseInt(value));
		}
		if(judgeByRegexRadioButton.isSelected()) {
			return BlindSqlInjectionJudgeCommandFactory.createJudgeByRegexCommand(value, regexInverseCheckBox.isSelected());
		}
		throw new IllegalStateException("must select determine type.");
	}

	private void setIndexMark() {
		setMarkImpl(BlindSqlInjectionLogic.POSITION_MARK_INDEX);
	}
	private void setOperatorAndValueMark() {
		setMarkImpl(BlindSqlInjectionLogic.POSITION_MARK_OPERATOR_AND_VALUE);
	}
	private void setValueMark() {
		setMarkImpl(BlindSqlInjectionLogic.POSITION_MARK_VALUE);
	}
	private void setMarkImpl(String mark) {
		var messageEditorPanel = parentPanel.getMessageSelectorPanel().getMessageEditorPanel();
		var selectionBounds = messageEditorPanel.getRequestSelectionBounds();
		if(selectionBounds[0] == selectionBounds[1]) {
			parentPanel.println("must select bounds of request message");
			return;
		}

		var replacedRequest = ByteUtil.replace(messageEditorPanel.getRequest(), selectionBounds[0], selectionBounds[1], mark);
		messageEditorPanel.setRequest(replacedRequest);
	}

}
