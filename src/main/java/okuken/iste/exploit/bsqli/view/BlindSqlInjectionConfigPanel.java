package okuken.iste.exploit.bsqli.view;

import javax.swing.JPanel;
import javax.swing.JRadioButton;

import okuken.iste.consts.Captions;
import okuken.iste.exploit.bsqli.command.BlindSqlInjectionJudgeCommand;
import okuken.iste.exploit.bsqli.command.BlindSqlInjectionJudgeCommandFactory;
import okuken.iste.exploit.bsqli.dto.BlindSqlInjectionConfigDto;
import okuken.iste.exploit.bsqli.enums.BlindSqlInjectionJudgeOperatorType;
import okuken.iste.exploit.bsqli.logic.BlindSqlInjectionLogic;
import okuken.iste.util.ByteUtil;

import javax.swing.ButtonGroup;
import javax.swing.JButton;
import javax.swing.JLabel;
import javax.swing.JCheckBox;
import java.awt.event.ActionListener;
import java.util.Arrays;
import java.awt.event.ActionEvent;
import javax.swing.JComboBox;
import javax.swing.JTextField;
import javax.swing.GroupLayout;
import javax.swing.GroupLayout.Alignment;
import javax.swing.LayoutStyle.ComponentPlacement;
import javax.swing.SwingConstants;

public class BlindSqlInjectionConfigPanel extends JPanel {

	private static final long serialVersionUID = 1L;

	private ButtonGroup judgeButtonGroup = new ButtonGroup();
	private JRadioButton judgeByLengthRadioButton;
	private JRadioButton judgeByTimeRadioButton;
	private JRadioButton judgeByRegexRadioButton;

	private JCheckBox useChainCheckBox;
	private JCheckBox needUrlEncodeCheckBox;

	private JComboBox<BlindSqlInjectionJudgeOperatorType> lengthOperatorComboBox;
	private JTextField lengthValueTextField;
	private JComboBox<BlindSqlInjectionJudgeOperatorType> timeOperatorComboBox;
	private JTextField timeValueTextField;
	private JTextField regexTextField;
	private JCheckBox regexInverseCheckBox;

	private JTextField startIndexTextField;
	private JTextField maxIndexTextField;
	private JTextField intervalTimeMsTextField;

	private BlindSqlInjectionPanel parentPanel;

	public BlindSqlInjectionConfigPanel(BlindSqlInjectionPanel parentPanel) {
		this.parentPanel = parentPanel;
		
		JButton setIndexMarkButton = new JButton(Captions.TOOLS_EXPLOIT_SET + " " + BlindSqlInjectionLogic.POSITION_MARK_INDEX);
		setIndexMarkButton.setToolTipText(String.format(Captions.TOOLS_EXPLOIT_BSQLI_BUTTON_INDEX_TT, BlindSqlInjectionLogic.POSITION_MARK_INDEX, BlindSqlInjectionLogic.POSITION_MARK_OPERATOR_AND_VALUE));
		setIndexMarkButton.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				setIndexMark();
			}
		});
		
		JButton setOperatorAndValueMarkButton = new JButton(Captions.TOOLS_EXPLOIT_SET + " " + BlindSqlInjectionLogic.POSITION_MARK_OPERATOR_AND_VALUE);
		setOperatorAndValueMarkButton.setToolTipText(String.format(Captions.TOOLS_EXPLOIT_BSQLI_BUTTON_OPEVAL_TT, BlindSqlInjectionLogic.POSITION_MARK_INDEX, BlindSqlInjectionLogic.POSITION_MARK_OPERATOR_AND_VALUE));
		setOperatorAndValueMarkButton.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				setOperatorAndValueMark();
			}
		});
		
		JButton setValueMarkButton = new JButton(Captions.TOOLS_EXPLOIT_SET + " " + BlindSqlInjectionLogic.POSITION_MARK_VALUE);
		setValueMarkButton.setToolTipText(String.format(Captions.TOOLS_EXPLOIT_BSQLI_BUTTON_VALUE_TT, BlindSqlInjectionLogic.POSITION_MARK_INDEX, BlindSqlInjectionLogic.POSITION_MARK_VALUE));
		setValueMarkButton.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				setValueMark();
			}
		});
		
		useChainCheckBox = new JCheckBox(Captions.TOOLS_EXPLOIT_USE_CHAIN);
		//TODO: impl
		useChainCheckBox.setEnabled(false);
		
		needUrlEncodeCheckBox = new JCheckBox(Captions.TOOLS_EXPLOIT_NEED_URLENCODE);
		
		JLabel judgeByLabel = new JLabel(Captions.TOOLS_EXPLOIT_BSQLI_JUDGEBY + ":");
		
		judgeByLengthRadioButton = new JRadioButton(Captions.TOOLS_EXPLOIT_BSQLI_JUDGEBY_LENGTH);
		judgeByLengthRadioButton.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				refreshEnableJudgeByComponents();
			}
		});
		judgeButtonGroup.add(judgeByLengthRadioButton);
		
		judgeByTimeRadioButton = new JRadioButton(Captions.TOOLS_EXPLOIT_BSQLI_JUDGEBY_TIME);
		judgeByTimeRadioButton.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				refreshEnableJudgeByComponents();
			}
		});
		judgeButtonGroup.add(judgeByTimeRadioButton);
		
		judgeByRegexRadioButton = new JRadioButton(Captions.TOOLS_EXPLOIT_BSQLI_JUDGEBY_REGEX);
		judgeByRegexRadioButton.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				refreshEnableJudgeByComponents();
			}
		});
		judgeButtonGroup.add(judgeByRegexRadioButton);
		
		lengthOperatorComboBox = new JComboBox<BlindSqlInjectionJudgeOperatorType>();
		Arrays.stream(BlindSqlInjectionJudgeOperatorType.values()).forEach(operator -> {
			lengthOperatorComboBox.addItem(operator);
		});
		
		timeOperatorComboBox = new JComboBox<BlindSqlInjectionJudgeOperatorType>();
		Arrays.stream(BlindSqlInjectionJudgeOperatorType.values()).forEach(operator -> {
			timeOperatorComboBox.addItem(operator);
		});
		
		lengthValueTextField = new JTextField(5);
		lengthValueTextField.setHorizontalAlignment(SwingConstants.RIGHT);
		
		timeValueTextField = new JTextField(5);
		timeValueTextField.setHorizontalAlignment(SwingConstants.RIGHT);
		
		regexTextField = new JTextField(20);
		
		regexInverseCheckBox = new JCheckBox(Captions.TOOLS_EXPLOIT_BSQLI_JUDGEBY_REGEX_INVERSE);
		
		JLabel startIndexLabel = new JLabel(Captions.TOOLS_EXPLOIT_START_INDEX + ":");
		
		startIndexTextField = new JTextField(Integer.toString(BlindSqlInjectionConfigDto.DEFAULT_START_INDEX), 5);
		startIndexTextField.setHorizontalAlignment(SwingConstants.RIGHT);
		
		JLabel maxIndexLabel = new JLabel(Captions.TOOLS_EXPLOIT_MAX_INDEX + ":");
		
		maxIndexTextField = new JTextField(Integer.toString(BlindSqlInjectionConfigDto.DEFAULT_MAX_INDEX), 5);
		maxIndexTextField.setHorizontalAlignment(SwingConstants.RIGHT);
		
		JLabel intervalTimeMsLabel = new JLabel(Captions.TOOLS_EXPLOIT_INTERVAL_TIME + ":");
		
		intervalTimeMsTextField = new JTextField(Integer.toString(BlindSqlInjectionConfigDto.DEFAULT_INTERVAL_TIMEMS), 5);
		intervalTimeMsTextField.setHorizontalAlignment(SwingConstants.RIGHT);
		
		GroupLayout groupLayout = new GroupLayout(this);
		groupLayout.setHorizontalGroup(
			groupLayout.createParallelGroup(Alignment.LEADING)
				.addGroup(groupLayout.createSequentialGroup()
					.addContainerGap()
					.addGroup(groupLayout.createParallelGroup(Alignment.LEADING, false)
						.addComponent(setIndexMarkButton, GroupLayout.PREFERRED_SIZE, 119, GroupLayout.PREFERRED_SIZE)
						.addGroup(groupLayout.createSequentialGroup()
							.addComponent(setOperatorAndValueMarkButton, GroupLayout.PREFERRED_SIZE, 131, GroupLayout.PREFERRED_SIZE)
							.addPreferredGap(ComponentPlacement.RELATED)
							.addComponent(setValueMarkButton, GroupLayout.PREFERRED_SIZE, 109, GroupLayout.PREFERRED_SIZE))
						.addComponent(useChainCheckBox, GroupLayout.PREFERRED_SIZE, 211, GroupLayout.PREFERRED_SIZE)
						.addComponent(needUrlEncodeCheckBox, GroupLayout.PREFERRED_SIZE, 127, GroupLayout.PREFERRED_SIZE)
						.addComponent(judgeByLabel, GroupLayout.PREFERRED_SIZE, 258, GroupLayout.PREFERRED_SIZE)
						.addGroup(groupLayout.createSequentialGroup()
							.addGroup(groupLayout.createParallelGroup(Alignment.LEADING, false)
								.addComponent(startIndexLabel, GroupLayout.PREFERRED_SIZE, 54, GroupLayout.PREFERRED_SIZE)
								.addComponent(maxIndexLabel, GroupLayout.DEFAULT_SIZE, 131, Short.MAX_VALUE)
								.addComponent(intervalTimeMsLabel, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
							.addPreferredGap(ComponentPlacement.RELATED)
							.addGroup(groupLayout.createParallelGroup(Alignment.LEADING)
								.addComponent(startIndexTextField, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
								.addComponent(maxIndexTextField, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
								.addComponent(intervalTimeMsTextField, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)))
						.addGroup(groupLayout.createSequentialGroup()
							.addGap(10)
							.addGroup(groupLayout.createParallelGroup(Alignment.LEADING)
								.addComponent(judgeByLengthRadioButton, GroupLayout.PREFERRED_SIZE, 70, GroupLayout.PREFERRED_SIZE)
								.addComponent(judgeByTimeRadioButton, GroupLayout.PREFERRED_SIZE, 70, GroupLayout.PREFERRED_SIZE)
								.addComponent(judgeByRegexRadioButton, GroupLayout.PREFERRED_SIZE, 70, GroupLayout.PREFERRED_SIZE))
							.addGap(5)
							.addGroup(groupLayout.createParallelGroup(Alignment.LEADING, false)
								.addGroup(groupLayout.createSequentialGroup()
									.addGroup(groupLayout.createParallelGroup(Alignment.LEADING, false)
										.addComponent(timeOperatorComboBox, 0, 50, Short.MAX_VALUE)
										.addComponent(lengthOperatorComboBox, 0, 50, Short.MAX_VALUE))
									.addPreferredGap(ComponentPlacement.RELATED)
									.addGroup(groupLayout.createParallelGroup(Alignment.LEADING, false)
										.addComponent(timeValueTextField)
										.addComponent(lengthValueTextField)))
								.addComponent(regexTextField, Alignment.TRAILING, 0, 0, Short.MAX_VALUE))
							.addPreferredGap(ComponentPlacement.RELATED)
							.addComponent(regexInverseCheckBox, GroupLayout.PREFERRED_SIZE, 60, GroupLayout.PREFERRED_SIZE)))
					.addGap(130))
		);
		groupLayout.setVerticalGroup(
			groupLayout.createParallelGroup(Alignment.LEADING)
				.addGroup(groupLayout.createSequentialGroup()
					.addContainerGap()
					.addComponent(setIndexMarkButton)
					.addPreferredGap(ComponentPlacement.RELATED)
					.addGroup(groupLayout.createParallelGroup(Alignment.LEADING)
						.addComponent(setOperatorAndValueMarkButton)
						.addComponent(setValueMarkButton))
					.addPreferredGap(ComponentPlacement.UNRELATED)
					.addComponent(useChainCheckBox)
					.addPreferredGap(ComponentPlacement.RELATED)
					.addComponent(needUrlEncodeCheckBox)
					.addPreferredGap(ComponentPlacement.UNRELATED)
					.addComponent(judgeByLabel)
					.addPreferredGap(ComponentPlacement.RELATED)
					.addGroup(groupLayout.createParallelGroup(Alignment.LEADING)
						.addGroup(groupLayout.createSequentialGroup()
							.addComponent(judgeByLengthRadioButton)
							.addPreferredGap(ComponentPlacement.RELATED)
							.addGroup(groupLayout.createParallelGroup(Alignment.LEADING)
								.addComponent(timeOperatorComboBox, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
								.addComponent(timeValueTextField, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
								.addComponent(judgeByTimeRadioButton)))
						.addComponent(lengthOperatorComboBox, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
						.addComponent(lengthValueTextField, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
					.addPreferredGap(ComponentPlacement.RELATED)
					.addGroup(groupLayout.createParallelGroup(Alignment.LEADING)
						.addComponent(judgeByRegexRadioButton)
						.addComponent(regexInverseCheckBox)
						.addComponent(regexTextField, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
					.addPreferredGap(ComponentPlacement.UNRELATED)
					.addGroup(groupLayout.createParallelGroup(Alignment.LEADING)
						.addComponent(startIndexLabel)
						.addComponent(startIndexTextField, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
					.addPreferredGap(ComponentPlacement.RELATED)
					.addGroup(groupLayout.createParallelGroup(Alignment.LEADING)
						.addComponent(maxIndexLabel)
						.addComponent(maxIndexTextField, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
					.addPreferredGap(ComponentPlacement.UNRELATED)
					.addGroup(groupLayout.createParallelGroup(Alignment.LEADING)
							.addComponent(intervalTimeMsLabel)
							.addComponent(intervalTimeMsTextField, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
					.addContainerGap(19, Short.MAX_VALUE))
		);
		setLayout(groupLayout);
		
		
		refreshEnableJudgeByComponents();
	}

	private void refreshEnableJudgeByComponents() {
		lengthOperatorComboBox.setEnabled(judgeByLengthRadioButton.isSelected());
		lengthValueTextField.setEnabled(judgeByLengthRadioButton.isSelected());
		timeOperatorComboBox.setEnabled(judgeByTimeRadioButton.isSelected());
		timeValueTextField.setEnabled(judgeByTimeRadioButton.isSelected());
		regexTextField.setEnabled(judgeByRegexRadioButton.isSelected());
		regexInverseCheckBox.setEnabled(judgeByRegexRadioButton.isSelected());
	}

	BlindSqlInjectionConfigDto createDto() {
		var messageEditorPanel = parentPanel.getMessageSelectorPanel().getMessageEditorPanel();
		var ret = new BlindSqlInjectionConfigDto(messageEditorPanel.getRequest(), messageEditorPanel.getHttpService(), createJudgeCommand());
		ret.setUseChain(useChainCheckBox.isSelected());
		ret.setNeedUrlEncode(needUrlEncodeCheckBox.isSelected());
		ret.setStartIndex(Integer.parseInt(startIndexTextField.getText()));
		ret.setMaxIndex(Integer.parseInt(maxIndexTextField.getText()));
		ret.setIntervalTimeMs(Integer.parseInt(intervalTimeMsTextField.getText()));
		return ret;
	}
	private BlindSqlInjectionJudgeCommand createJudgeCommand() {
		if(judgeByLengthRadioButton.isSelected()) {
			return BlindSqlInjectionJudgeCommandFactory.createJudgeByLengthCommand(lengthOperatorComboBox.getItemAt(lengthOperatorComboBox.getSelectedIndex()), Integer.parseInt(lengthValueTextField.getText()));
		}
		if(judgeByTimeRadioButton.isSelected()) {
			return BlindSqlInjectionJudgeCommandFactory.createJudgeByTimeCommand(timeOperatorComboBox.getItemAt(timeOperatorComboBox.getSelectedIndex()), Integer.parseInt(timeValueTextField.getText()));
		}
		if(judgeByRegexRadioButton.isSelected()) {
			return BlindSqlInjectionJudgeCommandFactory.createJudgeByRegexCommand(regexTextField.getText(), regexInverseCheckBox.isSelected());
		}
		throw new IllegalStateException("must select determine type.");
	}

	private void setIndexMark() {
		setMarkImpl(BlindSqlInjectionLogic.POSITION_MARK_INDEX);
	}
	private void setOperatorAndValueMark() {
		setMarkImpl(BlindSqlInjectionLogic.POSITION_MARK_OPERATOR_AND_VALUE);
	}
	private void setValueMark() {
		setMarkImpl(BlindSqlInjectionLogic.POSITION_MARK_VALUE);
	}
	private void setMarkImpl(String mark) {
		var messageEditorPanel = parentPanel.getMessageSelectorPanel().getMessageEditorPanel();
		var selectionBounds = messageEditorPanel.getRequestSelectionBounds();
		if(selectionBounds[0] == selectionBounds[1]) {
			parentPanel.println("must select bounds of request message");
			return;
		}

		var replacedRequest = ByteUtil.replace(messageEditorPanel.getRequest(), selectionBounds[0], selectionBounds[1], mark);
		messageEditorPanel.setRequest(replacedRequest);
	}

}
