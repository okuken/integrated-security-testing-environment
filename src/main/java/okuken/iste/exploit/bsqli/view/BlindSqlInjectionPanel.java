package okuken.iste.exploit.bsqli.view;

import javax.swing.JPanel;
import javax.swing.JRadioButton;
import javax.swing.JScrollPane;

import java.awt.BorderLayout;
import javax.swing.JTextArea;

import okuken.iste.consts.Captions;
import okuken.iste.consts.Colors;
import okuken.iste.controller.Controller;
import okuken.iste.exploit.bsqli.command.BlindSqlInjectionJudgeCommand;
import okuken.iste.exploit.bsqli.command.BlindSqlInjectionJudgeCommandFactory;
import okuken.iste.exploit.bsqli.dto.BlindSqlInjectionConfigDto;
import okuken.iste.exploit.bsqli.enums.BlindSqlInjectionJudgeOperatorType;
import okuken.iste.exploit.bsqli.logic.BlindSqlInjectionLogic;
import okuken.iste.util.ByteUtil;
import okuken.iste.util.ThreadUtil;
import okuken.iste.util.UiUtil;
import okuken.iste.view.AbstractDockoutableTabPanel;
import okuken.iste.view.message.selector.MessageSelectorPanel;

import javax.swing.AbstractButton;
import javax.swing.ButtonGroup;
import javax.swing.JButton;
import javax.swing.JLabel;
import javax.swing.JCheckBox;
import javax.swing.JSplitPane;
import javax.swing.JTabbedPane;
import javax.swing.border.LineBorder;
import java.awt.event.ActionListener;
import java.util.Arrays;
import java.awt.event.ActionEvent;
import javax.swing.JComboBox;
import javax.swing.JTextField;

public class BlindSqlInjectionPanel extends AbstractDockoutableTabPanel {

	private static final long serialVersionUID = 1L;

	private MessageSelectorPanel messageSelectorPanel;

	private ButtonGroup judgeButtonGroup = new ButtonGroup();
	private JRadioButton judgeByLengthRadioButton;
	private JRadioButton judgeByTimeRadioButton;
	private JRadioButton judgeByRegexRadioButton;

	private JCheckBox useChainCheckBox;
	private JCheckBox needUrlEncodeCheckBox;

	private JComboBox<BlindSqlInjectionJudgeOperatorType> operatorComboBox;
	private JTextField valueTextField;
	private JCheckBox regexInverseCheckBox;

	private JTextField startIndexTextField;
	private JTextField maxIndexTextField;
	private JTextField intervalTimeMsTextField;

	private JTextArea logTextArea;

	private JButton dockoutButton;

	private BlindSqlInjectionLogic logic;

	public BlindSqlInjectionPanel() {
		setLayout(new BorderLayout(0, 0));
		
		JPanel headerPanel = new JPanel();
		add(headerPanel, BorderLayout.NORTH);
		headerPanel.setLayout(new BorderLayout(0, 0));
		
		JPanel headerLeftPanel = new JPanel();
		headerPanel.add(headerLeftPanel, BorderLayout.WEST);
		
		JLabel titleLabel = new JLabel(Captions.TOOLS_EXPLOIT_BSQLI_TITLE);
		headerLeftPanel.add(titleLabel);
		
		JPanel headerRightPanel = new JPanel();
		headerPanel.add(headerRightPanel, BorderLayout.EAST);
		
		dockoutButton = new JButton();
		headerRightPanel.add(dockoutButton);
		setupDockout();
		
		JSplitPane splitPane = new JSplitPane();
		splitPane.setOrientation(JSplitPane.VERTICAL_SPLIT);
		add(splitPane);
		
		JSplitPane configSplitPane = new JSplitPane();
		splitPane.setLeftComponent(configSplitPane);
		
		messageSelectorPanel = new MessageSelectorPanel();
		configSplitPane.setLeftComponent(messageSelectorPanel);
		
		JPanel configDetailPanel = new JPanel();
		configDetailPanel.setBorder(new LineBorder(Colors.BLOCK_BORDER));
		configSplitPane.setRightComponent(configDetailPanel);
		
		JButton setIndexMarkButton = new JButton(Captions.TOOLS_EXPLOIT_SET + " " + BlindSqlInjectionLogic.POSITION_MARK_INDEX);
		setIndexMarkButton.setToolTipText(String.format(Captions.TOOLS_EXPLOIT_BSQLI_BUTTON_INDEX_TT, BlindSqlInjectionLogic.POSITION_MARK_INDEX, BlindSqlInjectionLogic.POSITION_MARK_OPERATOR_AND_VALUE));
		setIndexMarkButton.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				setIndexMark();
			}
		});
		configDetailPanel.add(setIndexMarkButton);
		
		JButton setOperatorAndValueMarkButton = new JButton(Captions.TOOLS_EXPLOIT_SET + " " + BlindSqlInjectionLogic.POSITION_MARK_OPERATOR_AND_VALUE);
		setOperatorAndValueMarkButton.setToolTipText(String.format(Captions.TOOLS_EXPLOIT_BSQLI_BUTTON_OPEVAL_TT, BlindSqlInjectionLogic.POSITION_MARK_INDEX, BlindSqlInjectionLogic.POSITION_MARK_OPERATOR_AND_VALUE));
		setOperatorAndValueMarkButton.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				setOperatorAndValueMark();
			}
		});
		configDetailPanel.add(setOperatorAndValueMarkButton);
		
		JButton setValueMarkButton = new JButton(Captions.TOOLS_EXPLOIT_SET + " " + BlindSqlInjectionLogic.POSITION_MARK_VALUE);
		setValueMarkButton.setToolTipText(String.format(Captions.TOOLS_EXPLOIT_BSQLI_BUTTON_VALUE_TT, BlindSqlInjectionLogic.POSITION_MARK_INDEX, BlindSqlInjectionLogic.POSITION_MARK_VALUE));
		setValueMarkButton.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				setValueMark();
			}
		});
		configDetailPanel.add(setValueMarkButton);
		
		useChainCheckBox = new JCheckBox(Captions.TOOLS_EXPLOIT_USE_CHAIN);
		configDetailPanel.add(useChainCheckBox);
		
		needUrlEncodeCheckBox = new JCheckBox(Captions.TOOLS_EXPLOIT_NEED_URLENCODE);
		configDetailPanel.add(needUrlEncodeCheckBox);
		
		JLabel judgeByLabel = new JLabel(Captions.TOOLS_EXPLOIT_BSQLI_JUDGEBY + ":");
		configDetailPanel.add(judgeByLabel);
		
		judgeByLengthRadioButton = new JRadioButton(Captions.TOOLS_EXPLOIT_BSQLI_JUDGEBY_LENGTH);
		judgeButtonGroup.add(judgeByLengthRadioButton);
		configDetailPanel.add(judgeByLengthRadioButton);
		
		judgeByTimeRadioButton = new JRadioButton(Captions.TOOLS_EXPLOIT_BSQLI_JUDGEBY_TIME);
		judgeButtonGroup.add(judgeByTimeRadioButton);
		configDetailPanel.add(judgeByTimeRadioButton);
		
		judgeByRegexRadioButton = new JRadioButton(Captions.TOOLS_EXPLOIT_BSQLI_JUDGEBY_REGEX);
		judgeButtonGroup.add(judgeByRegexRadioButton);
		configDetailPanel.add(judgeByRegexRadioButton);
		
		operatorComboBox = new JComboBox<BlindSqlInjectionJudgeOperatorType>();
		Arrays.stream(BlindSqlInjectionJudgeOperatorType.values()).forEach(operator -> {
			operatorComboBox.addItem(operator);
		});
		configDetailPanel.add(operatorComboBox);
		
		valueTextField = new JTextField(10);
		configDetailPanel.add(valueTextField);
		
		regexInverseCheckBox = new JCheckBox(Captions.TOOLS_EXPLOIT_BSQLI_JUDGEBY_REGEX_INVERSE);
		configDetailPanel.add(regexInverseCheckBox);
		
		JLabel startIndexLabel = new JLabel(Captions.TOOLS_EXPLOIT_START_INDEX + ":");
		configDetailPanel.add(startIndexLabel);
		
		startIndexTextField = new JTextField(Integer.toString(BlindSqlInjectionConfigDto.DEFAULT_START_INDEX), 3);
		configDetailPanel.add(startIndexTextField);
		
		JLabel maxIndexLabel = new JLabel(Captions.TOOLS_EXPLOIT_MAX_INDEX + ":");
		configDetailPanel.add(maxIndexLabel);
		
		maxIndexTextField = new JTextField(Integer.toString(BlindSqlInjectionConfigDto.DEFAULT_MAX_INDEX), 3);
		configDetailPanel.add(maxIndexTextField);
		
		JLabel intervalTimeMsLabel = new JLabel(Captions.TOOLS_EXPLOIT_INTERVAL_TIME + ":");
		configDetailPanel.add(intervalTimeMsLabel);
		
		intervalTimeMsTextField = new JTextField(Integer.toString(BlindSqlInjectionConfigDto.DEFAULT_INTERVAL_TIMEMS), 5);
		configDetailPanel.add(intervalTimeMsTextField);
		
		JPanel attackPanel = new JPanel();
		attackPanel.setBorder(new LineBorder(Colors.BLOCK_BORDER));
		splitPane.setRightComponent(attackPanel);
		attackPanel.setLayout(new BorderLayout(0, 0));
		
		JPanel attackControlPanel = new JPanel();
		attackPanel.add(attackControlPanel, BorderLayout.NORTH);
		
		JButton attackButton = new JButton(Captions.TOOLS_EXPLOIT_ATTACK);
		attackButton.setForeground(Colors.BUTTON_FOREGROUND_HIGHLIGHT);
		attackButton.setBackground(Colors.BUTTON_BACKGROUND_HIGHLIGHT);
		attackButton.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				startAttack();
			}
		});
		attackControlPanel.add(attackButton);
		
		JButton stopButton = new JButton(Captions.TOOLS_EXPLOIT_STOP);
		stopButton.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				stopAttack();
			}
		});
		attackControlPanel.add(stopButton);
		
		JScrollPane logTextAreaScrollPane = new JScrollPane();
		attackPanel.add(logTextAreaScrollPane, BorderLayout.CENTER);
		
		logTextArea = new JTextArea();
		logTextArea.setEditable(false);
		logTextAreaScrollPane.setViewportView(logTextArea);
		
		
		logic = new BlindSqlInjectionLogic(UiUtil.createTextAreaPrintStream(logTextArea));
	}

	private void startAttack() {
		if(logic.isAttacking()) {
			println("already started.");
			return;
		}

		try {
			//TODO: validation
			var dto = createDto();
			ThreadUtil.submit(() -> {
				logic.startAttack(dto);
			});
		} catch(Exception e) {
			println(e.toString());
		}
	}

	private void stopAttack() {
		logic.stopAttack();
	}

	private BlindSqlInjectionConfigDto createDto() {
		var ret = new BlindSqlInjectionConfigDto(messageSelectorPanel.getMessageEditorPanel().getRequest(), messageSelectorPanel.getMessageEditorPanel().getHttpService(), createJudgeCommand());
		ret.setUseChain(useChainCheckBox.isSelected());
		ret.setNeedUrlEncode(needUrlEncodeCheckBox.isSelected());
		ret.setStartIndex(Integer.parseInt(startIndexTextField.getText()));
		ret.setMaxIndex(Integer.parseInt(maxIndexTextField.getText()));
		ret.setIntervalTimeMs(Integer.parseInt(intervalTimeMsTextField.getText()));
		return ret;
	}
	private BlindSqlInjectionJudgeCommand createJudgeCommand() {
		var operator = operatorComboBox.getItemAt(operatorComboBox.getSelectedIndex());
		var value = valueTextField.getText();
		if(judgeByLengthRadioButton.isSelected()) {
			return BlindSqlInjectionJudgeCommandFactory.createJudgeByLengthCommand(operator, Integer.parseInt(value));
		}
		if(judgeByTimeRadioButton.isSelected()) {
			return BlindSqlInjectionJudgeCommandFactory.createJudgeByTimeCommand(operator, Integer.parseInt(value));
		}
		if(judgeByRegexRadioButton.isSelected()) {
			return BlindSqlInjectionJudgeCommandFactory.createJudgeByRegexCommand(value, regexInverseCheckBox.isSelected());
		}
		throw new IllegalStateException("must select determine type.");
	}


	private void setIndexMark() {
		setMarkImpl(BlindSqlInjectionLogic.POSITION_MARK_INDEX);
	}
	private void setOperatorAndValueMark() {
		setMarkImpl(BlindSqlInjectionLogic.POSITION_MARK_OPERATOR_AND_VALUE);
	}
	private void setValueMark() {
		setMarkImpl(BlindSqlInjectionLogic.POSITION_MARK_VALUE);
	}
	private void setMarkImpl(String mark) {
		var messageEditorPanel = messageSelectorPanel.getMessageEditorPanel();
		var selectionBounds = messageEditorPanel.getRequestSelectionBounds();
		if(selectionBounds[0] == selectionBounds[1]) {
			println("must select bounds of request message");
			return;
		}

		var replacedRequest = ByteUtil.replace(messageEditorPanel.getRequest(), selectionBounds[0], selectionBounds[1], mark);
		messageEditorPanel.setRequest(replacedRequest);
	}

	private void println(String message) {
		logTextArea.append(message + "\n");
		logTextArea.setCaretPosition(logTextArea.getDocument().getLength());
	}

	@Override
	protected JTabbedPane getParentTabbedPane() {
		return Controller.getInstance().getToolsTabbedPane();
	}

	@Override
	protected AbstractButton getDockoutButton() {
		return dockoutButton;
	}

	@Override
	protected String getTabName() {
		return Captions.TAB_TOOLS_BSQLI;
	}

	@Override
	protected int getTabIndex() {
		return 1; //TODO: consider other dockout
	}

}
