package okuken.iste.exploit.bsqli.view;

import javax.swing.JPanel;
import javax.swing.JScrollPane;

import java.awt.BorderLayout;
import javax.swing.JTextArea;
import javax.swing.SwingUtilities;

import okuken.iste.consts.Captions;
import okuken.iste.consts.Colors;
import okuken.iste.controller.Controller;
import okuken.iste.dto.HttpRequestResponseDto;
import okuken.iste.exploit.bsqli.logic.BlindSqlInjectionLogic;
import okuken.iste.util.ThreadUtil;
import okuken.iste.util.UiUtil;
import okuken.iste.view.AbstractDockoutableTabPanel;
import okuken.iste.view.message.selector.MessageSelectorPanel;

import javax.swing.AbstractButton;
import javax.swing.JButton;
import javax.swing.JLabel;
import javax.swing.JSplitPane;
import javax.swing.JTabbedPane;
import javax.swing.border.LineBorder;

import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;

public class BlindSqlInjectionPanel extends AbstractDockoutableTabPanel {

	private static final long serialVersionUID = 1L;

	private MessageSelectorPanel messageSelectorPanel;
	private BlindSqlInjectionConfigPanel configDetailPanel;
	private JTextArea logTextArea;

	private JButton dockoutButton;

	private BlindSqlInjectionLogic logic;

	public BlindSqlInjectionPanel() {
		this(null, null, false);
	}
	public BlindSqlInjectionPanel(Integer messageId, HttpRequestResponseDto message, boolean popup) {
		setLayout(new BorderLayout(0, 0));
		
		JPanel headerPanel = new JPanel();
		add(headerPanel, BorderLayout.NORTH);
		headerPanel.setLayout(new BorderLayout(0, 0));
		
		JPanel headerLeftPanel = new JPanel();
		headerPanel.add(headerLeftPanel, BorderLayout.WEST);
		
		JLabel titleLabel = new JLabel(Captions.TOOLS_EXPLOIT_BSQLI_TITLE);
		headerLeftPanel.add(titleLabel);
		
		JPanel headerRightPanel = new JPanel();
		headerPanel.add(headerRightPanel, BorderLayout.EAST);
		
		if(!popup) {
			dockoutButton = new JButton();
			headerRightPanel.add(dockoutButton);
			setupDockout();
		}
		
		JSplitPane splitPane = new JSplitPane();
		splitPane.setOrientation(JSplitPane.VERTICAL_SPLIT);
		add(splitPane);
		
		JSplitPane configSplitPane = new JSplitPane();
		splitPane.setLeftComponent(configSplitPane);
		
		messageSelectorPanel = new MessageSelectorPanel(messageId, message, popup);
		configSplitPane.setLeftComponent(messageSelectorPanel);
		
		configDetailPanel = new BlindSqlInjectionConfigPanel(this);
		configDetailPanel.setBorder(new LineBorder(Colors.BLOCK_BORDER));
		configSplitPane.setRightComponent(configDetailPanel);
		
		SwingUtilities.invokeLater(() -> {
			configSplitPane.setDividerLocation(0.5);
		});
		
		JPanel attackPanel = new JPanel();
		attackPanel.setBorder(new LineBorder(Colors.BLOCK_BORDER));
		splitPane.setRightComponent(attackPanel);
		attackPanel.setLayout(new BorderLayout(0, 0));
		
		JPanel attackControlPanel = new JPanel();
		attackPanel.add(attackControlPanel, BorderLayout.NORTH);
		
		JButton attackButton = new JButton(Captions.TOOLS_EXPLOIT_ATTACK);
		attackButton.setForeground(Colors.BUTTON_FOREGROUND_HIGHLIGHT);
		attackButton.setBackground(Colors.BUTTON_BACKGROUND_HIGHLIGHT);
		attackButton.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				startAttack();
			}
		});
		attackControlPanel.add(attackButton);
		
		JButton stopButton = new JButton(Captions.TOOLS_EXPLOIT_STOP);
		stopButton.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				stopAttack();
			}
		});
		attackControlPanel.add(stopButton);
		
		JScrollPane logTextAreaScrollPane = new JScrollPane();
		attackPanel.add(logTextAreaScrollPane, BorderLayout.CENTER);
		
		logTextArea = new JTextArea();
		logTextArea.setEditable(false);
		logTextAreaScrollPane.setViewportView(logTextArea);
		
		
		logic = new BlindSqlInjectionLogic(UiUtil.createTextAreaPrintStream(logTextArea));
	}

	private void startAttack() {
		if(logic.isAttacking()) {
			println("already started.");
			return;
		}

		try {
			//TODO: validation
			var dto = configDetailPanel.createDto();
			ThreadUtil.submit(() -> {
				logic.startAttack(dto);
			});
		} catch(Exception e) {
			println(e.toString());
		}
	}

	private void stopAttack() {
		logic.stopAttack();
	}

	MessageSelectorPanel getMessageSelectorPanel() {
		return messageSelectorPanel;
	}

	void println(String message) {
		logTextArea.append(message + System.lineSeparator());
		logTextArea.setCaretPosition(logTextArea.getDocument().getLength());
	}

	@Override
	protected JTabbedPane getParentTabbedPane() {
		return Controller.getInstance().getToolsTabbedPane();
	}

	@Override
	protected AbstractButton getDockoutButton() {
		return dockoutButton;
	}

	@Override
	protected String getTabName() {
		return Captions.TAB_TOOLS_BSQLI;
	}

	@Override
	protected int getTabIndex() {
		return 1; //TODO: consider other dockout
	}

}
